/*
 * ReferenceDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mulesoft.mocksvc.controllers;

import static org.junit.Assert.*;

import java.io.*;
import java.util.*;

import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Test;

import com.mulesoft.mocksvc.models.*;
import com.mulesoft.mocksvc.exceptions.*;
import com.mulesoft.mocksvc.APIHelper;
import com.mulesoft.mocksvc.DateTimeHelper;
import com.mulesoft.mocksvc.Configuration;
import com.mulesoft.mocksvc.testing.TestHelper;
import com.mulesoft.mocksvc.controllers.ReferenceController;

import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;
import org.joda.time.LocalDate;

public class ReferenceControllerTest extends ControllerTestBase {
    
    /**
     * Controller instance (for all tests)
     */
    private static ReferenceController controller;
    
    /**
     * Setup test class
     */
    @BeforeClass
    public static void setUpClass() {
        controller = getClient().getReference();
    }

    /**
     * Tear down test class
     * @throws IOException
     */
    @AfterClass
    public static void tearDownClass() throws IOException {
        controller = null;
    }

    /**
     * Get reference data
     * @throws Throwable
     */
    @Test
    public void testReferenceDataCodesetsGET1() throws Throwable {
        // Parameters for the API call
        String codesets = "title, gender";
        String system = "portal";
        String xTransactionID = "550e8400-e29b-41d4-a716-446655440000";
        String xTrackingID = null;
        String xSessionID = null;
        DateTime xCreationTime = null;
        String xInitialSystem = null;
        String xInitialComponent = null;
        String xInitialOperation = null;
        String xClientID = "e5f19124663b428bda269a3b53b722ef";
        String xClientSecret = "ea1b8baf121f4612A29C096C8AA0C6D4";

        // Set callback and perform API call
        ReferenceDataCodesetsResponse54 result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getReferenceDataCodesetsGET(codesets, system, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"totalRecords\": 5,  \"records\": [    {      \"codesetName\": \"title\",      \"codeset\": [        {          \"systemValue\": \"Mister\",          \"cbusValue\": \"Mr\"        },        {          \"systemValue\": \"Mrs\",          \"cbusValue\": \"Mrs\"        },        {          \"systemValue\": \"Ms\",          \"cbusValue\": \"Ms\"        },        {          \"systemValue\": \"Miss\",          \"cbusValue\": \"Miss\"        },        {          \"systemValue\": \"Doctor\",          \"cbusValue\": \"Dr\"        }      ]    },    {      \"codesetName\": \"gender\",      \"codeset\": [        {          \"systemValue\": \"Boy\",          \"cbusValue\": \"Male\"        },        {          \"systemValue\": \"Girl\",          \"cbusValue\": \"Female\"        }      ]    },    {      \"codesetName\": \"state\",      \"codeset\": [        {          \"systemValue\": \"Australia Capital Territory\",          \"cbusValue\": \"ACT\"        },        {          \"systemValue\": \"New South Wales\",          \"cbusValue\": \"NSW\"        },        {          \"systemValue\": \"Northern Territory\",          \"cbusValue\": \"NT\"        },        {          \"systemValue\": \"Queensland\",          \"cbusValue\": \"QLD\"        },        {          \"systemValue\": \"South Australia\",          \"cbusValue\": \"SA\"        },        {          \"systemValue\": \"Tasmania\",          \"cbusValue\": \"TAS\"        },        {          \"systemValue\": \"Victoria\",          \"cbusValue\": \"VIC\"        },        {          \"systemValue\": \"Western Australia\",          \"cbusValue\": \"WA\"        }      ]    },    {      \"codesetName\": \"employmentStatus\",      \"codeset\": [        {          \"systemValue\": \"Industry Super\",          \"cbusValue\": \"Industry Super\"        },        {          \"systemValue\": \"Sole Trader Super\",          \"cbusValue\": \"Sole Trader Super\"        },        {          \"systemValue\": \"Personal Super\",          \"cbusValue\": \"Personal Super\"        }      ]    },    {      \"codesetName\": \"occupationCategory\",      \"codeset\": [        {          \"systemValue\": \"Manual\",          \"cbusValue\": \"Manual\"        },        {          \"systemValue\": \"Non-manual\",          \"cbusValue\": \"Non-manual\"        },        {          \"systemValue\": \"Professional\",          \"cbusValue\": \"Professional\"        },        {          \"systemValue\": \"Electech\",          \"cbusValue\": \"Electech\"        }      ]    }  ]}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Common error responses returned by an API
     * @throws Throwable
     */
    @Test
    public void testReferenceDataLifeInsuranceDefaultInsuranceGET1() throws Throwable {
        // Parameters for the API call
        String age = null;
        String employmentStatus = "employed";
        String occupationalCategory = "Manual";
        String membershipDivision = "Industry";
        Boolean applyingForTPD = false;
        Boolean illnessDeathWithin24Months = false;
        Boolean workingAtLeast15Hours = false;
        Boolean offWorkDueToSickOrInjured = false;
        Boolean employerCurrentLastSixMonths = false;
        String xTransactionID = "550e8400-e29b-41d4-a716-446655440000";
        String xTrackingID = null;
        String xSessionID = null;
        DateTime xCreationTime = null;
        String xInitialSystem = null;
        String xInitialComponent = null;
        String xInitialOperation = null;
        String xClientID = "e5f19124663b428bda269a3b53b722ef";
        String xClientSecret = "ea1b8baf121f4612A29C096C8AA0C6D4";

        // Set callback and perform API call
        DefaultInsurance result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getReferenceDataLifeInsuranceDefaultInsuranceGET(age, employmentStatus, occupationalCategory, membershipDivision, applyingForTPD, illnessDeathWithin24Months, workingAtLeast15Hours, offWorkDueToSickOrInjured, employerCurrentLastSixMonths, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"death\": {    \"cover\": 100000,    \"units\": 4,    \"costPerWeek\": 1.2  },  \"tpd\": {    \"cover\": 134000,    \"units\": 3,    \"costPerWeek\": 1.3  },  \"ip\": {    \"cover\": 12345,    \"units\": 2,    \"costPerWeek\": 2.2  }}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Testcase for testing endpoint ReferenceDataLifeInsuranceCalEligibility_POST
     * @throws Throwable
     */
    @Test
    public void testReferenceDataLifeInsuranceCalEligibilityPOST1() throws Throwable {
        // Parameters for the API call
        CalEligibilityRequest body = APIHelper.deserialize("{  \"age\": \"30\",  \"individual\": {    \"employmentStatus\": \"Employed\",    \"occupationalCategory\": \"MANUAL\",    \"membershipDivision\": \"Industry\"  },  \"eligibility\": {    \"workMinimum30Hours\": true,    \"illnessOrAwayFromWork\": true,    \"beenDeclinedOrHadExclusion\": false  }}", new TypeReference<CalEligibilityRequest>(){});

        // Set callback and perform API call
        CalEligibilityResponse result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.createReferenceDataLifeInsuranceCalEligibilityPOST(body);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"eligible\": true,  \"death\": {    \"maxUnits\": 5,    \"defaultUnits\": 2,    \"coverAmounts\": [      {        \"unit\": 1,        \"amount\": 10000      },      {        \"unit\": 2,        \"amount\": 20000      },      {        \"unit\": 3,        \"amount\": 30000      },      {        \"unit\": 4,        \"amount\": 40000      },      {        \"unit\": 5,        \"amount\": 50000      },      {        \"unit\": 6,        \"amount\": 60000      }    ]  },  \"tpd\": {    \"maxUnits\": 5,    \"defaultUnits\": 2,    \"coverAmounts\": [      {        \"unit\": 1,        \"amount\": 10000      },      {        \"unit\": 2,        \"amount\": 20000      },      {        \"unit\": 3,        \"amount\": 30000      },      {        \"unit\": 4,        \"amount\": 40000      },      {        \"unit\": 5,        \"amount\": 50000      },      {        \"unit\": 6,        \"amount\": 60000      }    ]  },  \"ip\": {    \"defaultUnits\": 2,    \"coverAmounts\": [      {        \"unit\": 1,        \"amount\": 10000      },      {        \"unit\": 2,        \"amount\": 20000      },      {        \"unit\": 3,        \"amount\": 30000      },      {        \"unit\": 4,        \"amount\": 40000      },      {        \"unit\": 5,        \"amount\": 50000      },      {        \"unit\": 6,        \"amount\": 60000      }    ]  }}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

    /**
     * Common error responses returned by an API
     * @throws Throwable
     */
    @Test
    public void testReferenceDataLifeInsuranceInsuranceCoverGET1() throws Throwable {
        // Parameters for the API call
        String age = "30";
        String employmentStatus = "employed";
        String occupationalCategory = "Manual";
        String membershipDivision = "Industry";
        String insuranceType = "TPD,IP,Death";
        String xTransactionID = "550e8400-e29b-41d4-a716-446655440000";
        String xTrackingID = null;
        String xSessionID = null;
        DateTime xCreationTime = null;
        String xInitialSystem = null;
        String xInitialComponent = null;
        String xInitialOperation = null;
        String xClientID = "e5f19124663b428bda269a3b53b722ef";
        String xClientSecret = "ea1b8baf121f4612A29C096C8AA0C6D4";

        // Set callback and perform API call
        DefaultInsurance result = null;
        controller.setHttpCallBack(httpResponse);
        try {
            result = controller.getReferenceDataLifeInsuranceInsuranceCoverGET(age, employmentStatus, occupationalCategory, membershipDivision, insuranceType, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret);
        } catch(APIException e) {};

       // Test whether the response is null
        assertNotNull("Response is null", 
                httpResponse.getResponse());
        // Test response code
        assertEquals("Status is not 200", 
                200, httpResponse.getResponse().getStatusCode());

        // Test whether the captured response is as we expected
        assertNotNull("Result does not exist", 
                result);
        assertEquals("Response body does not match exactly",
                "{  \"death\": {    \"cover\": 100000,    \"units\": 4,    \"costPerWeek\": 1.2  },  \"tpd\": {    \"cover\": 134000,    \"units\": 3,    \"costPerWeek\": 1.3  },  \"ip\": {    \"cover\": 12345,    \"units\": 2,    \"costPerWeek\": 2.2  }}", 
                TestHelper.convertStreamToString(httpResponse.getResponse().getRawBody()));
    }

}
