/*
 * ReferenceDataAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
package com.mulesoft.mocksvc.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import org.joda.time.DateTime;

import com.mulesoft.mocksvc.*;
import com.mulesoft.mocksvc.models.*;
import com.mulesoft.mocksvc.exceptions.*;
import com.mulesoft.mocksvc.http.client.HttpClient;
import com.mulesoft.mocksvc.http.client.HttpContext;
import com.mulesoft.mocksvc.http.request.HttpRequest;
import com.mulesoft.mocksvc.http.response.HttpResponse;
import com.mulesoft.mocksvc.http.response.HttpStringResponse;
import com.mulesoft.mocksvc.http.client.APICallBack;
import com.mulesoft.mocksvc.controllers.syncwrapper.APICallBackCatcher;

public class ReferenceController extends BaseController {    
    //private static variables for the singleton pattern
    private static Object syncObject = new Object();
    private static ReferenceController instance = null;

    /**
     * Singleton pattern implementation 
     * @return The singleton instance of the ReferenceController class 
     */
    public static ReferenceController getInstance() {
        synchronized (syncObject) {
            if (null == instance) {
                instance = new ReferenceController();
            }
        }
        return instance;
    }

    /**
     * Common error responses returned by an API
     * @param    accountType    Required parameter: Example: 
     * @param    fundName    Optional parameter: Search with full or partial fund name
     * @param    usi    Optional parameter: Search by Unique Superannuation Identifier
     * @param    abn    Optional parameter: Search by Fund's ABN
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the ReferenceDataSuperFundsResponse84 response from the API call 
     */
    public ReferenceDataSuperFundsResponse84 getReferenceDataSuperFundsGET(
                final AccountTypeEnum accountType,
                final String fundName,
                final String usi,
                final String abn,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret
    ) throws Throwable {
        APICallBackCatcher<ReferenceDataSuperFundsResponse84> callback = new APICallBackCatcher<ReferenceDataSuperFundsResponse84>();
        getReferenceDataSuperFundsGETAsync(accountType, fundName, usi, abn, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Common error responses returned by an API
     * @param    accountType    Required parameter: Example: 
     * @param    fundName    Optional parameter: Search with full or partial fund name
     * @param    usi    Optional parameter: Search by Unique Superannuation Identifier
     * @param    abn    Optional parameter: Search by Fund's ABN
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the void response from the API call 
     */
    public void getReferenceDataSuperFundsGETAsync(
                final AccountTypeEnum accountType,
                final String fundName,
                final String usi,
                final String abn,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret,
                final APICallBack<ReferenceDataSuperFundsResponse84> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/reference-data/super-funds");

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = -5448733327416652726L;
                    {
                        put( "accountType", (accountType != null) ? accountType.value() : null );
                        put( "fundName?", fundName );
                        put( "usi?", usi );
                        put( "abn", abn );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = -38647449L;
                    {
                        put( "X-TransactionID", xTransactionID );
                        put( "X-TrackingID", xTrackingID );
                        put( "X-SessionID", xSessionID );
                        put( "X-CreationTime", DateTimeHelper.toRfc8601DateTime(xCreationTime) );
                        put( "X-InitialSystem", xInitialSystem );
                        put( "X-InitialComponent", xInitialComponent );
                        put( "X-InitialOperation", xInitialOperation );
                        put( "X-ClientID", xClientID );
                        put( "X-ClientSecret", xClientSecret );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ResponseErrorBaseTypeException("Bad request", _context);

                            if (_responseCode == 401)
                                throw new ResponseErrorBaseTypeException("Unauthorised request", _context);

                            if (_responseCode == 403)
                                throw new ResponseErrorBaseTypeException("Forbidden", _context);

                            if (_responseCode == 404)
                                throw new ResponseErrorBaseTypeException("Resource not found", _context);

                            if (_responseCode == 405)
                                throw new ResponseErrorBaseTypeException("Method not allowed", _context);

                            if (_responseCode == 406)
                                throw new ResponseErrorBaseTypeException("Not acceptable", _context);

                            if (_responseCode == 415)
                                throw new ResponseErrorBaseTypeException("Unsupported media type", _context);

                            if (_responseCode == 500)
                                throw new ResponseErrorBaseTypeException("Server error", _context);

                            if (_responseCode == 502)
                                throw new ResponseErrorBaseTypeException("Bad gateway", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ReferenceDataSuperFundsResponse84 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ReferenceDataSuperFundsResponse84>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Get reference data
     * @param    codesets    Required parameter: list of comma delimetered codesets to use.
     * @param    system    Optional parameter: Optional system whos codesets to display. If specified the systems values will be returned along with the enterprise values. If not provided, only enterprise values will be returned.
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the ReferenceDataCodesetsResponse54 response from the API call 
     */
    public ReferenceDataCodesetsResponse54 getReferenceDataCodesetsGET(
                final String codesets,
                final String system,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret
    ) throws Throwable {
        APICallBackCatcher<ReferenceDataCodesetsResponse54> callback = new APICallBackCatcher<ReferenceDataCodesetsResponse54>();
        getReferenceDataCodesetsGETAsync(codesets, system, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Get reference data
     * @param    codesets    Required parameter: list of comma delimetered codesets to use.
     * @param    system    Optional parameter: Optional system whos codesets to display. If specified the systems values will be returned along with the enterprise values. If not provided, only enterprise values will be returned.
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the void response from the API call 
     */
    public void getReferenceDataCodesetsGETAsync(
                final String codesets,
                final String system,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret,
                final APICallBack<ReferenceDataCodesetsResponse54> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/reference-data/codesets");

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 8315339114457862530L;
                    {
                        put( "codesets", codesets );
                        put( "system", system );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = -38647449L;
                    {
                        put( "X-TransactionID", xTransactionID );
                        put( "X-TrackingID", xTrackingID );
                        put( "X-SessionID", xSessionID );
                        put( "X-CreationTime", DateTimeHelper.toRfc8601DateTime(xCreationTime) );
                        put( "X-InitialSystem", xInitialSystem );
                        put( "X-InitialComponent", xInitialComponent );
                        put( "X-InitialOperation", xInitialOperation );
                        put( "X-ClientID", xClientID );
                        put( "X-ClientSecret", xClientSecret );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ResponseErrorBaseTypeException("Bad request", _context);

                            if (_responseCode == 401)
                                throw new ResponseErrorBaseTypeException("Unauthorised request", _context);

                            if (_responseCode == 403)
                                throw new ResponseErrorBaseTypeException("Forbidden", _context);

                            if (_responseCode == 404)
                                throw new ResponseErrorBaseTypeException("Resource not found", _context);

                            if (_responseCode == 405)
                                throw new ResponseErrorBaseTypeException("Method not allowed", _context);

                            if (_responseCode == 406)
                                throw new ResponseErrorBaseTypeException("Not acceptable", _context);

                            if (_responseCode == 415)
                                throw new ResponseErrorBaseTypeException("Unsupported media type", _context);

                            if (_responseCode == 500)
                                throw new ResponseErrorBaseTypeException("Server error", _context);

                            if (_responseCode == 502)
                                throw new ResponseErrorBaseTypeException("Bad gateway", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            ReferenceDataCodesetsResponse54 _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<ReferenceDataCodesetsResponse54>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Common error responses returned by an API
     * @param    age    Optional parameter: Example: 
     * @param    employmentStatus    Optional parameter: Example: 
     * @param    occupationalCategory    Optional parameter: Example: 
     * @param    membershipDivision    Optional parameter: Example: 
     * @param    applyingForTPD    Optional parameter: Are you applying for, entitled to or been paid a Total and Permanent Disablement (TPD) or Terminal Illness benefit?
     * @param    illnessDeathWithin24Months    Optional parameter: Have you been diagnosed with an illness that is likely to lead to your death within 24 months of the Date of Diagnosis?
     * @param    workingAtLeast15Hours    Optional parameter: Are you currently working at least 15 hours a week, an Australian resident, and a full time or part time worker whose work is not an Excluded Occupation
     * @param    offWorkDueToSickOrInjured    Optional parameter: Are you off work or on restricted duties because you are sick or injured?
     * @param    employerCurrentLastSixMonths    Optional parameter: Have you started working with your current employer in the last six months?
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the DefaultInsurance response from the API call 
     */
    public DefaultInsurance getReferenceDataLifeInsuranceDefaultInsuranceGET(
                final String age,
                final String employmentStatus,
                final String occupationalCategory,
                final String membershipDivision,
                final Boolean applyingForTPD,
                final Boolean illnessDeathWithin24Months,
                final Boolean workingAtLeast15Hours,
                final Boolean offWorkDueToSickOrInjured,
                final Boolean employerCurrentLastSixMonths,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret
    ) throws Throwable {
        APICallBackCatcher<DefaultInsurance> callback = new APICallBackCatcher<DefaultInsurance>();
        getReferenceDataLifeInsuranceDefaultInsuranceGETAsync(age, employmentStatus, occupationalCategory, membershipDivision, applyingForTPD, illnessDeathWithin24Months, workingAtLeast15Hours, offWorkDueToSickOrInjured, employerCurrentLastSixMonths, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Common error responses returned by an API
     * @param    age    Optional parameter: Example: 
     * @param    employmentStatus    Optional parameter: Example: 
     * @param    occupationalCategory    Optional parameter: Example: 
     * @param    membershipDivision    Optional parameter: Example: 
     * @param    applyingForTPD    Optional parameter: Are you applying for, entitled to or been paid a Total and Permanent Disablement (TPD) or Terminal Illness benefit?
     * @param    illnessDeathWithin24Months    Optional parameter: Have you been diagnosed with an illness that is likely to lead to your death within 24 months of the Date of Diagnosis?
     * @param    workingAtLeast15Hours    Optional parameter: Are you currently working at least 15 hours a week, an Australian resident, and a full time or part time worker whose work is not an Excluded Occupation
     * @param    offWorkDueToSickOrInjured    Optional parameter: Are you off work or on restricted duties because you are sick or injured?
     * @param    employerCurrentLastSixMonths    Optional parameter: Have you started working with your current employer in the last six months?
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the void response from the API call 
     */
    public void getReferenceDataLifeInsuranceDefaultInsuranceGETAsync(
                final String age,
                final String employmentStatus,
                final String occupationalCategory,
                final String membershipDivision,
                final Boolean applyingForTPD,
                final Boolean illnessDeathWithin24Months,
                final Boolean workingAtLeast15Hours,
                final Boolean offWorkDueToSickOrInjured,
                final Boolean employerCurrentLastSixMonths,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret,
                final APICallBack<DefaultInsurance> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/reference-data/life-insurance/default-insurance");

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = -1353808177L;
                    {
                        put( "age", age );
                        put( "employmentStatus", employmentStatus );
                        put( "occupationalCategory", occupationalCategory );
                        put( "membershipDivision", membershipDivision );
                        put( "applyingForTPD", applyingForTPD );
                        put( "illnessDeathWithin24Months", illnessDeathWithin24Months );
                        put( "workingAtLeast15Hours", workingAtLeast15Hours );
                        put( "offWorkDueToSickOrInjured", offWorkDueToSickOrInjured );
                        put( "employerCurrentLastSixMonths", employerCurrentLastSixMonths );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = -38647449L;
                    {
                        put( "X-TransactionID", xTransactionID );
                        put( "X-TrackingID", xTrackingID );
                        put( "X-SessionID", xSessionID );
                        put( "X-CreationTime", DateTimeHelper.toRfc8601DateTime(xCreationTime) );
                        put( "X-InitialSystem", xInitialSystem );
                        put( "X-InitialComponent", xInitialComponent );
                        put( "X-InitialOperation", xInitialOperation );
                        put( "X-ClientID", xClientID );
                        put( "X-ClientSecret", xClientSecret );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ResponseErrorBaseTypeException("Bad request", _context);

                            if (_responseCode == 401)
                                throw new ResponseErrorBaseTypeException("Unauthorised request", _context);

                            if (_responseCode == 403)
                                throw new ResponseErrorBaseTypeException("Forbidden", _context);

                            if (_responseCode == 404)
                                throw new ResponseErrorBaseTypeException("Resource not found", _context);

                            if (_responseCode == 405)
                                throw new ResponseErrorBaseTypeException("Method not allowed", _context);

                            if (_responseCode == 406)
                                throw new ResponseErrorBaseTypeException("Not acceptable", _context);

                            if (_responseCode == 415)
                                throw new ResponseErrorBaseTypeException("Unsupported media type", _context);

                            if (_responseCode == 500)
                                throw new ResponseErrorBaseTypeException("Server error", _context);

                            if (_responseCode == 502)
                                throw new ResponseErrorBaseTypeException("Bad gateway", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DefaultInsurance _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DefaultInsurance>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * TODO: type endpoint description here
     * @param    body    Required parameter: Example: 
     * @return    Returns the CalEligibilityResponse response from the API call 
     */
    public CalEligibilityResponse createReferenceDataLifeInsuranceCalEligibilityPOST(
                final CalEligibilityRequest body
    ) throws Throwable {
        APICallBackCatcher<CalEligibilityResponse> callback = new APICallBackCatcher<CalEligibilityResponse>();
        createReferenceDataLifeInsuranceCalEligibilityPOSTAsync(body, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * TODO: type endpoint description here
     * @param    body    Required parameter: Example: 
     * @return    Returns the void response from the API call 
     */
    public void createReferenceDataLifeInsuranceCalEligibilityPOSTAsync(
                final CalEligibilityRequest body,
                final APICallBack<CalEligibilityResponse> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/reference-data/life-insurance/cal-eligibility");
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = -1143154756L;
                    {
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                        put( "content-type", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                HttpRequest _request;
                try {
                    _request = getClientInstance().postBody(_queryUrl, _headers, APIHelper.serialize(body));
                } catch (JsonProcessingException jsonProcessingException) {
                    //let the caller know of the error
                    callBack.onFailure(null, jsonProcessingException);
                    return;
                }
                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            CalEligibilityResponse _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<CalEligibilityResponse>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

    /**
     * Common error responses returned by an API
     * @param    age    Optional parameter: Example: 
     * @param    employmentStatus    Optional parameter: Example: 
     * @param    occupationalCategory    Optional parameter: Example: 
     * @param    membershipDivision    Optional parameter: Example: 
     * @param    insuranceType    Optional parameter: list of insurance type comma delimited
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the DefaultInsurance response from the API call 
     */
    public DefaultInsurance getReferenceDataLifeInsuranceInsuranceCoverGET(
                final String age,
                final String employmentStatus,
                final String occupationalCategory,
                final String membershipDivision,
                final String insuranceType,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret
    ) throws Throwable {
        APICallBackCatcher<DefaultInsurance> callback = new APICallBackCatcher<DefaultInsurance>();
        getReferenceDataLifeInsuranceInsuranceCoverGETAsync(age, employmentStatus, occupationalCategory, membershipDivision, insuranceType, xTransactionID, xTrackingID, xSessionID, xCreationTime, xInitialSystem, xInitialComponent, xInitialOperation, xClientID, xClientSecret, callback);
        if(!callback.isSuccess())
            throw callback.getError();
        return callback.getResult();
    }

    /**
     * Common error responses returned by an API
     * @param    age    Optional parameter: Example: 
     * @param    employmentStatus    Optional parameter: Example: 
     * @param    occupationalCategory    Optional parameter: Example: 
     * @param    membershipDivision    Optional parameter: Example: 
     * @param    insuranceType    Optional parameter: list of insurance type comma delimited
     * @param    xTransactionID    Optional parameter: Unique ID for the Integration transaction. Generated by the Integration Platform, not the consumer system.
     * @param    xTrackingID    Optional parameter: Consumer system's tracking ID for this request (if any). This is optional and purely for troubleshooting / analysis purposes.
     * @param    xSessionID    Optional parameter: Consumer system's session ID for this request (if any). This is opti onal and purely for troubleshooting / analysis purposes.
     * @param    xCreationTime    Optional parameter: The time this message was created by the invoking system. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialSystem    Optional parameter: The system that initiated this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialComponent    Optional parameter: The first component that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.
     * @param    xInitialOperation    Optional parameter: The first operation that was involved in this transaction. This is optional and purely for troubleshooting / analysis purposes.may be tunneled to the provider system for fine-grained access control.
     * @param    xClientID    Optional parameter: The Client ID of the consumer
     * @param    xClientSecret    Optional parameter: The Client Secret of the consumer
     * @return    Returns the void response from the API call 
     */
    public void getReferenceDataLifeInsuranceInsuranceCoverGETAsync(
                final String age,
                final String employmentStatus,
                final String occupationalCategory,
                final String membershipDivision,
                final String insuranceType,
                final String xTransactionID,
                final String xTrackingID,
                final String xSessionID,
                final DateTime xCreationTime,
                final String xInitialSystem,
                final String xInitialComponent,
                final String xInitialOperation,
                final String xClientID,
                final String xClientSecret,
                final APICallBack<DefaultInsurance> callBack
    ) {
        Runnable _responseTask = new Runnable() {
            public void run() {
                //the base uri for api requests
                String _baseUri = Configuration.baseUri;

                //prepare query string for API call
                StringBuilder _queryBuilder = new StringBuilder(_baseUri);
                _queryBuilder.append("/reference-data/life-insurance/insurance-cover");

                //process query parameters
                APIHelper.appendUrlWithQueryParameters(_queryBuilder, new HashMap<String, Object>() {
                    private static final long serialVersionUID = 2983925901070305834L;
                    {
                        put( "age", age );
                        put( "employmentStatus", employmentStatus );
                        put( "occupationalCategory", occupationalCategory );
                        put( "membershipDivision", membershipDivision );
                        put( "insuranceType", insuranceType );
                    }});
                //validate and preprocess url
                String _queryUrl = APIHelper.cleanUrl(_queryBuilder);

                //load all headers for the outgoing API request
                Map<String, String> _headers = new HashMap<String, String>() {
                    private static final long serialVersionUID = -38647449L;
                    {
                        put( "X-TransactionID", xTransactionID );
                        put( "X-TrackingID", xTrackingID );
                        put( "X-SessionID", xSessionID );
                        put( "X-CreationTime", DateTimeHelper.toRfc8601DateTime(xCreationTime) );
                        put( "X-InitialSystem", xInitialSystem );
                        put( "X-InitialComponent", xInitialComponent );
                        put( "X-InitialOperation", xInitialOperation );
                        put( "X-ClientID", xClientID );
                        put( "X-ClientSecret", xClientSecret );
                        put( "user-agent", "APIMATIC 2.0" );
                        put( "accept", "application/json" );
                    }
                };

                //prepare and invoke the API call request to fetch the response
                final HttpRequest _request = getClientInstance().get(_queryUrl, _headers, null);

                //invoke the callback before request if its not null
                if (getHttpCallBack() != null)
                {
                    getHttpCallBack().OnBeforeRequest(_request);
                }

                //invoke request and get response
                getClientInstance().executeAsStringAsync(_request, new APICallBack<HttpResponse>() {
                    public void onSuccess(HttpContext _context, HttpResponse _response) {
                        try {

                            //invoke the callback after response if its not null
                            if (getHttpCallBack() != null)	
                            {
                                getHttpCallBack().OnAfterResponse(_context);
                            }

                            //Error handling using HTTP status codes
                            int _responseCode = _response.getStatusCode();
                            if (_responseCode == 400)
                                throw new ResponseErrorBaseTypeException("Bad request", _context);

                            if (_responseCode == 401)
                                throw new ResponseErrorBaseTypeException("Unauthorised request", _context);

                            if (_responseCode == 403)
                                throw new ResponseErrorBaseTypeException("Forbidden", _context);

                            if (_responseCode == 404)
                                throw new ResponseErrorBaseTypeException("Resource not found", _context);

                            if (_responseCode == 405)
                                throw new ResponseErrorBaseTypeException("Method not allowed", _context);

                            if (_responseCode == 406)
                                throw new ResponseErrorBaseTypeException("Not acceptable", _context);

                            if (_responseCode == 415)
                                throw new ResponseErrorBaseTypeException("Unsupported media type", _context);

                            if (_responseCode == 500)
                                throw new ResponseErrorBaseTypeException("Server error", _context);

                            if (_responseCode == 502)
                                throw new ResponseErrorBaseTypeException("Bad gateway", _context);

                            //handle errors defined at the API level
                            validateResponse(_response, _context);

                            //extract result from the http response
                            String _responseBody = ((HttpStringResponse)_response).getBody();
                            DefaultInsurance _result = APIHelper.deserialize(_responseBody,
                                                        new TypeReference<DefaultInsurance>(){});

                            //let the caller know of the success
                            callBack.onSuccess(_context, _result);
                        } catch (APIException error) {
                            //let the caller know of the error
                            callBack.onFailure(_context, error);
                        } catch (IOException ioException) {
                            //let the caller know of the caught IO Exception
                            callBack.onFailure(_context, ioException);
                        } catch (Exception exception) {
                            //let the caller know of the caught Exception
                            callBack.onFailure(_context, exception);
                        }
                    }
                    public void onFailure(HttpContext _context, Throwable _error) {
                        //invoke the callback after response if its not null
                        if (getHttpCallBack() != null)
                        {
                            getHttpCallBack().OnAfterResponse(_context);
                        }

                        //let the caller know of the failure
                        callBack.onFailure(_context, _error);
                    }
                });
            }
        };

        //execute async using thread pool
        APIHelper.getScheduler().execute(_responseTask);
    }

}